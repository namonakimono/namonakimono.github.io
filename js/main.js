function bomb(){
  flake.init();
  setPhDAdvisor();
}

var flakeIntervalID;
var flakeInited = false;

var textStr =  "Language designers usually need to implement parsers and printers. Despite being two intimately related programs, in practice they are often designed separately, and then need to be revised and kept consistent as the language evolves. It will be more convenient if the parser and printer can be unified and developed in one single program, with their consistency guaranteed automatically. ";
             + "Furthermore, in certain scenarios (like showing compiler optimisation results to the programmer), it is desirable to have a more powerful reflective printer that, when an abstract syntax tree corresponding to a piece of program text is modified, can reflect the modification to the program text while preserving layouts, comments, and syntactic sugar. "
             + "To address these needs, we propose a domain-specific language BiYacc, whose programs denote both a parser and a reflective printer for an unambiguous context-free grammar. BiYacc is based on the theory of bidirectional transformations, which helps to guarantee by construction that the pairs of parsers and reflective printers generated by BiYacc are consistent. We show that BiYacc is capable of facilitating many tasks such as Pombrio and Krishnamurthi’s “resugaring”, simple refactoring, and language evolution."
// wtf is js? String is not a list of Char
var textArr = (((textStr.split("")).filter(isPunc)).join("")).split(" ")

// is punctuation?
function isPunc(chr) {
    return (chr != '.' && chr != ',');
}

var flake = {

  init: function () {
    if (!flakeInited) {
      flake.callFontFlakes();
      flakeInited = true;
      $(document.body).css('font-family',"doge, sans-serif");
      $('#doge-img').attr('src',"img/dogeGlasses.png");
      $('#doge-it').css('filter',"invert(100%)");
    }
    else {
      flake.removeAll();
      flakeInited = false;
      $(document.body).css('font-family',"Roboto Slab, serif");
      $('#doge-img').attr('src',"img/doge.jpg");
      $('#doge-it').css('filter',"invert(0%)");
    }
  },

  callFontFlakes: function(){
    var intvID = window.setInterval(function(){
      flake.fontFlake();
    }, 100);
    flakeIntervalID = intvID;
  },

  fontFlake: function(){
      // let set some bloody vars
      var stageWidth = $(window).width();
      var stageHeight = $(window).height();
      // var stageHeight = maxHeight;
      var randomEntry = Math.ceil(Math.random()*stageWidth);
      var preRandomFontSize = Math.ceil(Math.random()*30);
      var randomFontSize = preRandomFontSize + 10;
      var flakeName = 'flake-'+randomEntry;
      var grayScale = Math.ceil(Math.random()*256);
      var hue = 'rgb('+grayScale+','+grayScale+','+grayScale+ ')';

      // ok time to create and animate this stupid thing.
      $('<div />', {
        // text: "doge",
        text: textArr[Math.floor(Math.random() * textArr.length)],
        // text: randomEntry,
        id: flakeName,
        // class: "fontFlake",
      }).appendTo('body').addClass('fontFlake').css('left', randomEntry).css('font-size', randomFontSize).css('color', hue).animate({
        "top": "+=" + stageHeight,
        opacity: 0
      }, 5000, function() {
        $('#'+flakeName).remove();
      });
  },

  removeAll: function(){
    $(".fontFlake").remove();
    clearInterval(flakeIntervalID);
  }
};


function setPhDAdvisor() {
  var ref = $("#reference");
  ref.empty();
  var advisor = "<p><a href='https://josh-hs-ko.github.io'>Hsiang-Shang Ko</a></p>";
  var addr = "<p>Assistant Professor by Special Appointment<br>National Institute of Informatics</p>";
  ref.append("<h2>PhD Advisor</h2>", advisor, addr);
}